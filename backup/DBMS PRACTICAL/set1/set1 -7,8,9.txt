
Practical 7- Consider the following database
Project(project_id,proj_name,chief_arch) , project_id is primary key
Employee(Emp_id,Emp_name) , Emp_id is primary key
Assigned-To(Project_id,Emp_id)
Find the SQL queries for the following:
1. Get the details of employees working on project C353
2. Get employee number of employees working on project C353
3. Obtain details of employees working on Database project
4. Get details of employees working on both C353 and C354
5. Get employee numbers of employees who do not work on project C453



C:\Users\ACER>mysql -u root -p
Enter password: ***************
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 12
Server version: 8.0.39 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.


mysql> CREATE DATABASE ProjectManagement;
Query OK, 1 row affected (0.01 sec)

mysql> USE ProjectManagement;
Database changed
mysql> CREATE TABLE Project (
       project_id VARCHAR(10) PRIMARY KEY,
         proj_name VARCHAR(50),
         chief_arch VARCHAR(50)
     );
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE TABLE Employee (
         emp_id INT PRIMARY KEY,
         emp_name VARCHAR(50)
     );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE Assigned_To (
      Use   project_id VARCHAR(10),
         emp_id INT,
         FOREIGN KEY (project_id) REFERENCES Project(project_id),
         FOREIGN KEY (emp_id) REFERENCES Employee(emp_id)
     );
Query OK, 0 rows affected (0.06 sec)

mysql> INSERT INTO Project (project_id, proj_name, chief_arch) VALUES
     ('C353', 'Database Project', 'John Doe'),
     ('C354', 'AI Project', 'Jane Smith'),
     ('C453', 'ML Project', 'Alice Johnson');
Query OK, 3 rows affected (0.02 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Employee (emp_id, emp_name) VALUES
     (101, 'Alice'),
     (102, 'Bob'),
     (103, 'Charlie'),
     (104, 'David');
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Assigned_To (project_id, emp_id) VALUES
     ('C353', 101),
     ('C353', 102),
     ('C354', 101),
     ('C354', 103),
     ('C453', 104);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT E.emp_id, E.emp_name
     FROM Employee E
     JOIN Assigned_To A ON E.emp_id = A.emp_id
     WHERE A.project_id = 'C353';
+--------+----------+
| emp_id | emp_name |
+--------+----------+
|    101 | Alice    |
|    102 | Bob      |
+--------+----------+
2 rows in set (0.01 sec)

mysql> SELECT E.emp_id
     FROM Employee E
     JOIN Assigned_To A ON E.emp_id = A.emp_id
     WHERE A.project_id = 'C353';
+--------+
| emp_id |
+--------+
|    101 |
|    102 |
+--------+
2 rows in set (0.00 sec)

mysql> SELECT E.emp_id, E.emp_name
     FROM Employee E
     JOIN Assigned_To A ON E.emp_id = A.emp_id
     JOIN Project P ON A.project_id = P.project_id
     WHERE P.proj_name = 'Database Project';
+--------+----------+
| emp_id | emp_name |
+--------+----------+
|    101 | Alice    |
|    102 | Bob      |
+--------+----------+
2 rows in set (0.01 sec)

mysql> SELECT E.emp_id, E.emp_name
     FROM Employee E
     WHERE E.emp_id IN (
         SELECT emp_id FROM Assigned_To WHERE project_id = 'C353'
     ) AND E.emp_id IN (
         SELECT emp_id FROM Assigned_To WHERE project_id = 'C354'
     );
+--------+----------+
| emp_id | emp_name |
+--------+----------+
|    101 | Alice    |
+--------+----------+
1 row in set (0.01 sec)

mysql>
mysql> SELECT E.emp_id
     FROM Employee E
     WHERE E.emp_id NOT IN (
         SELECT emp_id FROM Assigned_To WHERE project_id = 'C453'
     );
+--------+
| emp_id |
+--------+
|    101 |
|    102 |
|    103 |
+--------+
3 rows in set (0.01 sec)

Theory:

Explanation of Each Query:
Query 1: Joins Employee and Assigned_To tables to get employee details for project C353.
Query 2: Similar to Query 1 but only selects employee IDs for project C353.
Query 3: Joins all three tables (Employee, Assigned_To, Project) to get employees working on the "Database Project."
Query 4: Uses a nested query to find employees working on both projects C353 and C354.
Query 5: Uses a nested query with NOT IN to find employees not assigned to project C453.


===============================================================================================================

Practical 8-8. Consider the following database
Employee(emp_no,name,skill,pay-rate) eno primary key
Position(posting_no,skill) posting_no primary key
Duty_allocation(posting_no,emp_no,day,shift)
Find the SQL queries for the following:
1. Get the duty allocation details for emp_no 123461 for the month of April 1986.
2. Find the shift details for Employee ‘xyz’
3. Get employees whose rate of pay is more than or equal to the rate of pay of employee ‘xyz’
4. Get the names and pay rates of employees with emp_no less than 123460 whose rate of pay is more than the rate of pay of at least one employee with emp_no greater than or equal to 123460.
5. Find the names of employees who are assigned to all positions that require a Chef’s skill
6 .Find the employees with the lowest pay rate
7 .Get the employee numbers of all employees working on at least two dates.
8 .Get a list of names of employees with the skill of Chef who are assigned a duty
9 .Get a list of employees not assigned a duty
10.Get a count of different employees on each shift

C:\Users\ACER>mysql -u root -p
Enter password: ***************

mysql> CREATE DATABASE CompanyDatabase;
ERROR 1007 (HY000): Can't create database 'companydatabase'; database exists
mysql> CREATE DATABASE CompanyDatabase1;
Query OK, 1 row affected (0.01 sec)

mysql> USE CompanyDatabase1;
Database changed
mysql> CREATE TABLE Employee (
       emp_no INT PRIMARY KEY,
       name VARCHAR(50),
       skill VARCHAR(50),
        pay_rate DECIMAL(10, 2)
     );
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE TABLE Position (
        posting_no INT PRIMARY KEY,
        skill VARCHAR(50)
    );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE Duty_allocation (
        posting_no INT,
        emp_no INT,
       day DATE,
       shift VARCHAR(10),
       PRIMARY KEY (posting_no, emp_no, day));
Query OK, 0 rows affected (0.02 sec)

mysql> INSERT INTO Employee (emp_no, name, skill, pay_rate) VALUES
    (123456, 'John Doe', 'Chef', 20.00),
    (123457, 'Jane Smith', 'Waiter', 15.00),
    (123458, 'xyz', 'Chef', 25.00),
    (123459, 'Alice Brown', 'Bartender', 22.00),
    (123461, 'Bob White', 'Chef', 30.00);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Position (posting_no, skill) VALUES
     (101, 'Chef'),
    (102, 'Bartender'),
    (103, 'Waiter');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Duty_allocation (posting_no, emp_no, day, shift) VALUES
    (101, 123456, '1986-04-01', 'Morning'),
    (101, 123461, '1986-04-05', 'Evening'),
    (103, 123458, '1986-04-10', 'Night'),
     (102, 123459, '1986-04-15', 'Morning'),
    (101, 123461, '1986-04-20', 'Evening');
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT *
     FROM Duty_allocation
    WHERE emp_no = 123461
     AND MONTH(day) = 4
     AND YEAR(day) = 1986;
+------------+--------+------------+---------+
| posting_no | emp_no | day        | shift   |
+------------+--------+------------+---------+
|        101 | 123461 | 1986-04-05 | Evening |
|        101 | 123461 | 1986-04-20 | Evening |
+------------+--------+------------+---------+
2 rows in set (0.01 sec)

mysql> ^C
mysql> SELECT da.shift, da.day
    FROM Duty_allocation AS da
    JOIN Employee AS e ON da.emp_no = e.emp_no
    WHERE e.name = 'xyz';
+-------+------------+
| shift | day        |
+-------+------------+
| Night | 1986-04-10 |
+-------+------------+
1 row in set (0.00 sec)

mysql> SELECT *
    FROM Employee
    WHERE pay_rate >= (SELECT pay_rate FROM Employee WHERE name = 'xyz');
+--------+-----------+-------+----------+
| emp_no | name      | skill | pay_rate |
+--------+-----------+-------+----------+
| 123458 | xyz       | Chef  |    25.00 |
| 123461 | Bob White | Chef  |    30.00 |
+--------+-----------+-------+----------+
2 rows in set (0.01 sec)

mysql> SELECT e1.name, e1.pay_rate
     FROM Employee AS e1
    WHERE e1.emp_no < 123460
    AND e1.pay_rate > (SELECT MIN(e2.pay_rate)
                       FROM Employee AS e2
                        WHERE e2.emp_no >= 123460);
Empty set (0.01 sec)

mysql> SELECT e.name
    FROM Employee AS e
    JOIN Duty_allocation AS da ON e.emp_no = da.emp_no
    JOIN Position AS p ON da.posting_no = p.posting_no
    WHERE p.skill = 'Chef'
   GROUP BY e.emp_no, e.name
     HAVING COUNT(DISTINCT da.posting_no) = (SELECT COUNT(*) FROM Position WHERE skill = 'Chef');
+-----------+
| name      |
+-----------+
| John Doe  |
| Bob White |
+-----------+
2 rows in set (0.01 sec)

mysql> SELECT *
     FROM Employee
     WHERE pay_rate = (SELECT MIN(pay_rate) FROM Employee);
+--------+------------+--------+----------+
| emp_no | name       | skill  | pay_rate |
+--------+------------+--------+----------+
| 123457 | Jane Smith | Waiter |    15.00 |
+--------+------------+--------+----------+
1 row in set (0.00 sec)

mysql> SELECT emp_no
     FROM Duty_allocation
     GROUP BY emp_no
     HAVING COUNT(DISTINCT day) >= 2;
+--------+
| emp_no |
+--------+
| 123461 |
+--------+
1 row in set (0.00 sec)

mysql> SELECT DISTINCT e.name
     FROM Employee AS e
     JOIN Duty_allocation AS da ON e.emp_no = da.emp_no
     WHERE e.skill = 'Chef';
+-----------+
| name      |
+-----------+
| John Doe  |
| Bob White |
| xyz       |
+-----------+
3 rows in set (0.01 sec)

mysql> SELECT name
     FROM Employee
     WHERE emp_no NOT IN (SELECT emp_no FROM Duty_allocation);
+------------+
| name       |
+------------+
| Jane Smith |
+------------+
1 row in set (0.01 sec)

mysql> SELECT shift, COUNT(DISTINCT emp_no) AS employee_count
     FROM Duty_allocation
     GROUP BY shift;
+---------+----------------+
| shift   | employee_count |
+---------+----------------+
| Evening |              1 |
| Morning |              2 |
| Night   |              1 |
+---------+----------------+
3 rows in set (0.00 sec)
==================================================================================================================

Practical 9-9. Create the following tables. And Solve following queries by SQL
• Deposit (actno,cname,bname,amount,adate)
• Branch (bname,city)
• Customers (cname, city)
• Borrow(loanno,cname,bname, amount)
Add primary key and foreign key wherever applicable.
Insert data into the above created tables.
1. Display names of depositors having amount greater than 4000.
2. Display account date of customers Anil
3. Display account no. and deposit amount of customers having account opened between dates 1-12-96 and 1-5-97
4. Find the average account balance at the Perryridge branch.
5. Find the names of all branches where the average account balance is more than $1,200.
6. Delete depositors having deposit



mysql -u root -p
Enter password: ***************
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 8.0.39 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE DATABASE BankDatabase;
Query OK, 1 row affected (0.01 sec)

mysql> USE BankDatabase;
Database changed

mysql> CREATE TABLE Branch (
       bname VARCHAR(50) PRIMARY KEY,
       city VARCHAR(50));
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE TABLE Customers (
         cname VARCHAR(50) PRIMARY KEY,
       city VARCHAR(50)
    );
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE TABLE Deposit (
         actno INT PRIMARY KEY,
         cname VARCHAR(50),
         bname VARCHAR(50),
         amount DECIMAL(10, 2),
         adate DATE,
         FOREIGN KEY (cname) REFERENCES Customers(cname),
         FOREIGN KEY (bname) REFERENCES Branch(bname)
     );
Query OK, 0 rows affected (0.08 sec)

mysql> CREATE TABLE Borrow (
         loanno INT PRIMARY KEY,
         cname VARCHAR(50),
         bname VARCHAR(50),
         amount DECIMAL(10, 2),
         FOREIGN KEY (cname) REFERENCES Customers(cname),
         FOREIGN KEY (bname) REFERENCES Branch(bname)
     );
Query OK, 0 rows affected (0.06 sec)

mysql> INSERT INTO Branch (bname, city) VALUES
     ('Perryridge', 'San Francisco'),
     ('Downtown', 'New York'),
     ('Northside', 'Chicago');
Query OK, 3 rows affected (0.02 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Customers (cname, city) VALUES
    ('John', 'San Francisco'),
     ('Anil', 'New York'),
     ('Alice', 'Chicago');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Deposit (actno, cname, bname, amount, adate) VALUES
     (1001, 'John', 'Perryridge', 5000.00, '1996-01-01'),
     (1002, 'Anil', 'Downtown', 3000.00, '1997-04-01'),
     (1003, 'Alice', 'Northside', 4500.00, '1996-12-15'),
     (1004, 'John', 'Perryridge', 2000.00, '1997-05-10');
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Borrow (loanno, cname, bname, amount) VALUES
     (2001, 'John', 'Perryridge', 10000.00),
     (2002, 'Anil', 'Downtown', 7000.00),
     (2003, 'Alice', 'Northside', 8000.00);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT cname
     FROM Deposit
     WHERE amount > 4000;
+-------+
| cname |
+-------+
| John  |
| Alice |
+-------+
2 rows in set (0.01 sec)

mysql> SELECT adate
     FROM Deposit
     WHERE cname = 'Anil';
+------------+
| adate      |
+------------+
| 1997-04-01 |
+------------+
1 row in set (0.01 sec)

mysql> SELECT actno, amount
     FROM Deposit
     WHERE adate BETWEEN '1996-12-01' AND '1997-05-01';
+-------+---------+
| actno | amount  |
+-------+---------+
|  1002 | 3000.00 |
|  1003 | 4500.00 |
+-------+---------+
2 rows in set (0.00 sec)

mysql> SELECT AVG(amount) AS average_balance
     FROM Deposit
     WHERE bname = 'Perryridge';
+-----------------+
| average_balance |
+-----------------+
|     3500.000000 |
+-----------------+
1 row in set (0.01 sec)

mysql> SELECT AVG(amount) AS average_balance
     FROM Deposit
     WHERE bname = 'Perryridge';
+-----------------+
| average_balance |
+-----------------+
|     3500.000000 |
+-----------------+
1 row in set (0.00 sec)

mysql> SELECT bname
     FROM Deposit
     GROUP BY bname
     HAVING AVG(amount) > 1200;
+------------+
| bname      |
+------------+
| Downtown   |
| Northside  |
| Perryridge |
+------------+
3 rows in set (0.00 sec)

mysql> DELETE FROM Deposit
     WHERE amount < 5000;
Query OK, 3 rows affected (0.01 sec)

mysql>
mysql> CREATE VIEW DepositView AS
     SELECT actno, cname, bname, amount, adate
     FROM Deposit;
Query OK, 0 rows affected (0.01 sec)